generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Creator {
  id          String   @id @default(cuid())
  username    String   @unique
  displayName String
  bio         String?
  avatarUrl   String?
  theme       String?
  createdAt   DateTime @default(now())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  links       Link[]
  wallets     Wallets?

  @@index([username])
}

model Wallets {
  id               String      @id @default(cuid())
  creatorId        String      @unique
  lightningAddress String?
  bitcoinAddress   String?
  ethereumAddress  String?
  solanaAddress    String?
  dogeAddress      String?
  moneroAddress    String?
  mainWallet       WalletType? @default(LIGHTNING)
  creator          Creator     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model Link {
  id            String   @id @default(cuid())
  creatorId     String
  title         String
  url           String
  description   String?
  imageUrl      String?
  icon          String?
  isActive      Boolean  @default(true)
  position      Int      @default(0)
  clickCount    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  album         String?
  artist        String?
  audioUrl      String?
  author        String?
  canonical     String?
  genre         String?
  imageHeight   Int?
  imageWidth    Int?
  modifiedTime  String?
  publishedTime String?
  releaseDate   String?
  siteName      String?
  themeColor    String?
  type          String   @default("link")
  videoUrl      String?
  creator       Creator  @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId, position])
  @@index([creatorId, isActive])
  @@index([creatorId, type])
  @@index([siteName])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  creator       Creator?
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum WalletType {
  LIGHTNING
  BITCOIN
  ETHEREUM
  SOLANA
  DOGE
  MONERO
}
